---
description: 
globs: 
alwaysApply: true
---
# OrcaEditor UI 结构与 Tailwind v4 规范（AI Agent 指令版）

## 1. 布局结构与主 UI 组件

- 你必须始终使用全屏 flex 布局，sidebar、workspace、logo、菜单按钮等为同级元素。
- sidebar 必须固定宽度（w-[320px]），所有布局、阴影、背景、圆角等必须全部用 Tailwind 原子类实现。
- workspace 必须使用 `flex-1 flex flex-col h-screen`，内容区居中，宽高固定，阴影、背景、溢出等全部用 Tailwind。
- logo 必须绝对定位，z-30，left/top 直接用 style 或 Tailwind。
- 菜单按钮必须绝对定位，吸附 workspace 右上角，全部用 Tailwind。
- Orca 插画必须绝对定位在右下角，max-h，z-20。

## 2. CSS 文件职责严格划分

### orca.css - 仅用于文章内容样式
- ✅ **唯一职责**：处理 `.note-to-mp` 内的文章排版
- ✅ **允许的选择器**：仅限文章元素（h1-h6、p、ul、ol、blockquote 等）
- ✅ **作用范围**：仅在 `.note-to-mp` 容器内生效
- ❌ **严禁**：任何 UI 组件、布局、动画相关样式
- ❌ **严禁**：任何对 Tailwind 原子类的覆盖
- ❌ **严禁**：除主题色外的全局变量

### styles.css - 全局样式入口
```css
@import "tailwindcss";
:root {
  --color-primary: #445564;
  --color-background: #f5f7fa;
  --color-gray: #9ca3af;
  --color-red: #ef4444;
}
```
- ✅ **职责**：导入 Tailwind、定义全局变量
- ✅ **允许**：极少量全局主题变量
- ❌ **严禁**：任何自定义 class 样式

## 3. 组件与样式原则

- 你必须优先用 Tailwind 原子类实现所有样式，只允许极少量全局变量（如 :root 里的主题色）。
- 禁止使用自定义 class（如 .sidebar-btn、.welcome-container、.tree-link 等），所有样式必须迁移为 Tailwind。
- 按钮、提示、文件树、loading、欢迎页等所有 UI 元素，必须全部用 Tailwind 类实现布局、配色、hover、动画、阴影、圆角等。
- 响应式设计必须用 Tailwind 的 `md:`, `lg:` 等断点类，禁止自定义媒体查询。
- 动画与过渡必须用 Tailwind 的 `transition-*`、`duration-*`、`ease-in-out` 等。
- 只有确实无法用 Tailwind 实现的伪元素、极特殊效果，才允许在 orca.css 末尾用极少量自定义 CSS。

## 4. 动画规范

- 所有动画必须统一使用 `duration-400`
- 所有动画必须统一使用 `ease-[cubic-bezier(0.4,0,0.2,1)]`
- 优先使用 `transition-all` 而非特定属性
- 必须使用 `data-[state]` 控制状态
- 使用 `group` 和 `group-data-[state]` 控制子元素状态
- 禁止使用内联样式控制动画状态

## 5. JS 交互与事件绑定

- 你必须为所有事件绑定使用唯一 id 获取元素（如 `id="sidebar-btn"`），禁止依赖 class。
- 你必须在 addEventListener/onClick 绑定前判空，防止空指针报错。
- 你只能动态操作 Tailwind 类名，禁止操作自定义 class。

## 6. 开发流程规范

1. 新增 UI 组件：
   - 直接在 HTML 中使用 Tailwind 原子类
   - 禁止创建自定义 class
   - 使用 data 属性控制状态

2. 修改文章样式：
   - 仅在 orca.css 中修改
   - 确保选择器在 .note-to-mp 内
   - 不影响 UI 组件样式

3. 添加动画效果：
   - 使用 Tailwind transition 类
   - 保持时长和缓动函数一致
   - 使用 data-state 控制

## 7. 绝对禁止事项

1. ❌ 在 orca.css 中添加任何非文章样式
2. ❌ 创建自定义 class 样式
3. ❌ 使用内联样式控制状态
4. ❌ 覆盖 Tailwind 原子类
5. ❌ 在 styles.css 中添加自定义样式

## 8. Tailwind v4 迁移与新特性说明

### 核心变更
- 你必须使用新的 `@utility` API 替代 `@layer`
- 你必须用 CSS 变量替代 `theme()` 函数
- 你必须用显式配置加载替代自动加载
- 你必须使用新的变体系统
- 你必须采用改进的响应式设计
- 你必须利用更好的性能优化

### 废弃特性
- 禁止使用 `@tailwind` 指令
- 禁止使用 `@apply` 指令
- 禁止使用 `@layer` 指令
- 禁止使用 `@screen` 指令
- 禁止使用 `theme()` 函数
- 禁止使用 JIT 模式
- 禁止自动配置加载
- 禁止使用旧版变体系统

### 新增特性
- 你必须用 CSS 变量支持主题
- 你必须用新的媒体查询语法
- 你必须采用改进的响应式设计
- 你必须利用更好的性能优化
- 你必须用新的变体系统
- 你必须用显式配置加载

### 迁移/升级指南
- 你必须使用升级工具：`npx @tailwindcss/upgrade`
- 你必须检查浏览器兼容性（Safari 16.4+，Chrome 111+，Firefox 128+）
- 你必须更新构建工具配置（推荐 Vite）
- 你必须测试功能兼容性
- 你必须同步更新相关文件
- 你必须移除所有 v3 特性

#### 语法更新
- 你必须用 `(--var)` 替代 `[--var]`
- 你必须将变体顺序从右到左改为左到右
- 你必须用显式配置加载替代自动
- 你必须用 `@utility` 替代 `@layer`
- 你必须用原生 CSS 替代 `@apply`
- 你必须用 CSS 变量替代 `theme()`

### v4 最佳实践
- 你必须使用现代构建工具
- 你必须保持代码整洁
- 你必须遵循命名规范
- 你必须定期更新依赖
- 你必须测试浏览器兼容性
- 你必须监控性能指标
- 你必须保持文件同步更新
- 你必须避免使用 v3 特性

### 实践经验
- 你必须同步更新 HTML 和 JS 的样式
- 你必须保持类名引用一致性
- 你必须避免重复的 DOM 结构
- 你必须确保样式和功能对应
- 你必须检查并移除 v3 特性
- 你必须用 CSS 变量定义颜色
- 你必须优化选择器结构
- 你必须减少样式重复
- 你必须保持样式模块化
- 你必须用新的 `@utility` API
- 你必须保持组件层级清晰
- 你必须避免样式冲突
- 你必须保持结构语义化
- 你必须优化交互体验
- 你必须用新的变体系统

